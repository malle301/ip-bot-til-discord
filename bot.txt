const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');
const fs = require('fs');
const axios = require('axios');
const path = require('path');

// Insert your bot token here
const TOKEN = 'YOUR_BOT_TOKEN_HERE';

// Create a new instance of the client with necessary intents
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// Data files
const DATA_FILE = path.join(__dirname, 'user_data.json');
const KEYS_FILE = path.join(__dirname, 'keys.json');

// External API URL (replace with an actual API)
const IP_INFO_API_URL = 'https://ipinfo.io/{IP}/json'; // Example URL

// Function to ensure files and folders
function ensureFiles() {
    try {
        if (!fs.existsSync(DATA_FILE)) {
            fs.writeFileSync(DATA_FILE, JSON.stringify([], null, 4), 'utf-8');
            console.log('Created: user_data.json');
        }
        if (!fs.existsSync(KEYS_FILE)) {
            fs.writeFileSync(KEYS_FILE, JSON.stringify([], null, 4), 'utf-8');
            console.log('Created: keys.json');
        }
    } catch (error) {
        console.error(`Error ensuring files: ${error}`);
    }
}

// Call the function to ensure the files exist
ensureFiles();

client.once('ready', () => {
    console.log('Bot is ready!');
});

// Functions to handle JSON files
function loadJson(filename) {
    try {
        if (fs.existsSync(filename)) {
            return JSON.parse(fs.readFileSync(filename, 'utf-8'));
        } else {
            return [];
        }
    } catch (error) {
        console.error(`Error reading JSON file: ${error}`);
        return [];
    }
}

function saveJson(filename, data) {
    try {
        fs.writeFileSync(filename, JSON.stringify(data, null, 4), 'utf-8');
    } catch (error) {
        console.error(`Error writing JSON file: ${error}`);
    }
}

// Function to handle IP lookups
async function getIpInfo(ip) {
    try {
        const response = await axios.get(`https://ipinfo.io/${ip}/json?token=YOUR_API_KEY_HERE`);
        const data = response.data;

        return {
            active: data.status === 'ok',
            isVPN: data.org.includes('VPN') || data.org.includes('VPS'),
            org: data.org,
            city: data.city,
            region: data.region,
            country: data.country
        };
    } catch (error) {
        console.error(`Error fetching IP info: ${error}`);
        return {
            active: false,
            isVPN: false,
            org: 'Unknown',
            city: 'Unknown',
            region: 'Unknown',
            country: 'Unknown'
        };
    }
}

// Generate a random key
function generateKey() {
    return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);
}

// Add a key to the keys file
function addKey(key, duration) {
    const keys = loadJson(KEYS_FILE);
    keys.push({ key, duration, redeemed: false });
    saveJson(KEYS_FILE, keys);
}

// Redeem a key
function redeemKey(userId, key) {
    const keys = loadJson(KEYS_FILE);
    const keyData = keys.find(k => k.key === key && !k.redeemed);
    if (keyData) {
        keyData.redeemed = true;
        keyData.userId = userId;
        saveJson(KEYS_FILE, keys);
        return true;
    }
    return false;
}

// List redeemed keys
function listRedeemedKeys() {
    const keys = loadJson(KEYS_FILE).filter(k => k.redeemed);
    return keys.map(k => `Key: ${k.key}, User: <@${k.userId}>, Duration: ${k.duration} days`).join('\n');
}

// Remove access for a user
function removeAccess(userId) {
    const data = loadJson(DATA_FILE);
    const updatedData = data.filter(user => user.id !== userId);
    saveJson(DATA_FILE, updatedData);
}

client.on('messageCreate', async (message) => {
    if (message.content.startsWith('/lookup')) {
        const args = message.content.split(' ');
        const userId = args[1];  // Expecting userId as the second argument

        if (userId) {
            const data = loadJson(DATA_FILE);
            const userData = data.find(user => user.id === userId);

            if (userData) {
                const ipInfo = await getIpInfo(userData.ip);
                const embed = new EmbedBuilder()
                    .setColor('#2f3136')
                    .setAuthor({ name: 'User Information' })
                    .addFields(
                        { name: 'Username:', value: userData.mention || 'Unknown' },
                        { name: 'IP Address:', value: userData.ip || 'Unknown' },
                        { name: 'Active:', value: ipInfo.active ? 'Yes' : 'No' },
                        { name: 'VPN/VPS:', value: ipInfo.isVPN ? 'Yes' : 'No' },
                        { name: 'Organization:', value: ipInfo.org || 'Unknown' },
                        { name: 'City:', value: ipInfo.city || 'Unknown' },
                        { name: 'Region:', value: ipInfo.region || 'Unknown' },
                        { name: 'Country:', value: ipInfo.country || 'Unknown' }
                    );
                message.channel.send({ embeds: [embed] });
            } else {
                message.channel.send('No data found for this user ID.');
            }
        } else {
            message.channel.send('Please provide a user ID.');
        }
    }

    if (message.content.startsWith('/ipsearch')) {
        const args = message.content.split(' ');
        const ipAddress = args[1];

        if (ipAddress) {
            const ipInfo = await getIpInfo(ipAddress);
            message.channel.send(`IP Address Info:
                - Active: ${ipInfo.active ? 'Yes' : 'No'}
                - VPN/VPS: ${ipInfo.isVPN ? 'Yes' : 'No'}
                - Organization: ${ipInfo.org || 'Unknown'}
                - City: ${ipInfo.city || 'Unknown'}
                - Region: ${ipInfo.region || 'Unknown'}
                - Country: ${ipInfo.country || 'Unknown'}`);
        } else {
            message.channel.send('Please provide an IP address.');
        }
    }

    if (message.content.startsWith('/commands')) {
        const commandsList = "`/lookup <userId>` - Find user information for a specific user ID.\n" +
            "`/ipsearch <IP-address>` - Search for detailed information about an IP address.\n" +
            "`/genkey` - Generate a new access key (only for owners).\n" +
            "`/redeemkey <key>` - Redeem an access key.\n" +
            "`/redeemedkeys` - List all redeemed keys and their durations (only for owners).\n" +
            "`/removeaccess <@user>` - Remove access from a user (only for owners).\n" +
            "`/commands` - List all available commands.";
        message.channel.send(commandsList);
    }

    if (message.content.startsWith('/genkey')) {
        if (message.member.roles.cache.some(role => ['Founder', 'Co-Founder', 'Developer', 'Admin'].includes(role.name))) {
            const key = generateKey();
            addKey(key, 30); // 30 days example
            message.channel.send(`Generated key: ${key}`);
        } else {
            message.channel.send('You do not have permission to use this command.');
        }
    }

    if (message.content.startsWith('/redeemkey')) {
        const args = message.content.split(' ');
        const key = args[1];

        if (key) {
            if (redeemKey(message.author.id, key)) {
                message.channel.send('Key redeemed successfully!');
            } else {
                message.channel.send('Invalid or already redeemed key.');
            }
        } else {
            message.channel.send('Please provide a key to redeem.');
        }
    }

    if (message.content.startsWith('/redeemedkeys')) {
        if (message.member.roles.cache.some(role => ['Founder', 'Co-Founder', 'Developer', 'Admin'].includes(role.name))) {
            const keysList = listRedeemedKeys();
            message.channel.send(`Redeemed Keys:\n${keysList}`);
        } else {
            message.channel.send('You do not have permission to use this command.');
        }
    }

    if (message.content.startsWith('/removeaccess')) {
        if (message.member.roles.cache.some(role => ['Founder', 'Co-Founder', 'Developer', 'Admin'].includes(role.name))) {
            const mentionedUser = message.mentions.users.first();
            if (mentionedUser) {
                removeAccess(mentionedUser.id);
                message.channel.send(`Access removed for: ${mentionedUser.username}`);
            } else {
                message.channel.send('Please mention a user to remove access.');
            }
        } else {
            message.channel.send('You do not have permission to use this command.');
        }
    }
});

client.login(TOKEN);
