const { Client, GatewayIntentBits, EmbedBuilder } = require('discord.js');
const fs = require('fs');
const axios = require('axios');
const path = require('path');

// Replace these with your actual token and API key
const TOKEN = 'YOUR_BOT_TOKEN';
const IP_INFO_API_KEY = 'YOUR_API_KEY_HERE';

// Create a new client instance
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers
    ]
});

// File paths
const DATA_FILE = path.join(__dirname, 'user_data.json');
const KEYS_FILE = path.join(__dirname, 'keys.json');

// Utility function to load JSON data
const loadJson = (filename) => {
    if (fs.existsSync(filename)) {
        return JSON.parse(fs.readFileSync(filename, 'utf-8'));
    }
    return [];
};

// Utility function to save JSON data
const saveJson = (filename, data) => {
    fs.writeFileSync(filename, JSON.stringify(data, null, 4), 'utf-8');
};

// Ensure necessary files are present
const ensureFiles = () => {
    [DATA_FILE, KEYS_FILE].forEach(file => {
        if (!fs.existsSync(file)) {
            fs.writeFileSync(file, JSON.stringify([], null, 4), 'utf-8');
            console.log(`Created: ${file}`);
        }
    });
};

// Fetch IP info from an external API
const getIpInfo = async (ip) => {
    try {
        const response = await axios.get(`https://ipinfo.io/${ip}/json?token=${IP_INFO_API_KEY}`);
        const { org, city, region, country } = response.data;
        const isVPN = org.includes('VPN') || org.includes('VPS');
        return { active: true, isVPN, org, city, region, country };
    } catch (error) {
        console.error(`Error fetching IP info: ${error.message}`);
        return { active: false, isVPN: false, org: 'Unknown', city: 'Unknown', region: 'Unknown', country: 'Unknown' };
    }
};

// Generate a random access key
const generateKey = () => {
    return Math.random().toString(36).slice(2, 15) + Math.random().toString(36).slice(2, 15);
};

// Add a new key to the keys file
const addKey = (key, duration) => {
    const keys = loadJson(KEYS_FILE);
    keys.push({ key, duration, redeemed: false });
    saveJson(KEYS_FILE, keys);
};

// Redeem an access key
const redeemKey = (userId, key) => {
    const keys = loadJson(KEYS_FILE);
    const keyData = keys.find(k => k.key === key && !k.redeemed);
    if (keyData) {
        keyData.redeemed = true;
        keyData.userId = userId;
        saveJson(KEYS_FILE, keys);
        return true;
    }
    return false;
};

// List all redeemed keys
const listRedeemedKeys = () => {
    const keys = loadJson(KEYS_FILE).filter(k => k.redeemed);
    return keys.map(k => `Key: ${k.key}, User: <@${k.userId}>, Duration: ${k.duration} days`).join('\n');
};

// Remove access for a user
const removeAccess = (userId) => {
    const data = loadJson(DATA_FILE);
    const updatedData = data.filter(user => user.id !== userId);
    saveJson(DATA_FILE, updatedData);
};

// Send an embedded user info message
const sendUserInfoEmbed = async (message, userId) => {
    const data = loadJson(DATA_FILE);
    const userData = data.find(user => user.id === userId);

    if (userData) {
        const member = message.guild.members.cache.get(userId);
        const username = member ? member.user.username : 'Unknown';
        const ipInfo = await getIpInfo(userData.ip);
        const embed = new EmbedBuilder()
            .setColor('#2f3136')
            .setTitle('User Information')
            .addFields(
                { name: 'Username:', value: username, inline: true },
                { name: 'Name:', value: userData.mention || 'Unknown', inline: true },
                { name: 'IP Address:', value: userData.ip || 'Unknown', inline: true },
                { name: 'VPN Status', value: ipInfo.isVPN ? 'ðŸ›‘ VPN Detected' : 'âœ… No VPN Detected', inline: true },
                { name: 'Active Status', value: ipInfo.active ? 'ðŸŸ¢ Active' : 'ðŸ”´ Inactive', inline: true }
            )
            .setTimestamp()
            .setFooter({ text: 'Only you can see this', iconURL: message.author.displayAvatarURL() });

        await message.channel.send({ embeds: [embed] });
    } else {
        await message.channel.send('No data found for this user ID.');
    }
};

// Initialize necessary files and start the bot
ensureFiles();

client.once('ready', () => {
    console.log('Bot is ready!');
});

client.on('messageCreate', async (message) => {
    if (message.author.bot) return;

    const args = message.content.split(' ');
    const command = args[0];

    if (command === '/lookup') {
        const userId = args[1];
        if (userId) {
            await sendUserInfoEmbed(message, userId);
        } else {
            message.channel.send('Please provide a user ID.');
        }
    }

    if (command === '/ipsearch') {
        const ipAddress = args[1];
        if (ipAddress) {
            const ipInfo = await getIpInfo(ipAddress);
            message.channel.send(`IP Address Info:
                - Active: ${ipInfo.active ? 'Yes' : 'No'}
                - VPN/VPS: ${ipInfo.isVPN ? 'Yes' : 'No'}
                - Organization: ${ipInfo.org || 'Unknown'}
                - City: ${ipInfo.city || 'Unknown'}
                - Region: ${ipInfo.region || 'Unknown'}
                - Country: ${ipInfo.country || 'Unknown'}`);
        } else {
            message.channel.send('Please provide an IP address.');
        }
    }

    if (command === '/commands') {
        const commandsList = [
            "/lookup <userId> - Find user information for a specific user ID.",
            "/ipsearch <IP-address> - Search for detailed information about an IP address.",
            "/genkey - Generate a new access key (only for owners).",
            "/redeemkey <key> - Redeem an access key.",
            "/redeemedkeys - List all redeemed keys and their durations (only for owners).",
            "/removeaccess <@user> - Remove access from a user (only for owners).",
            "/commands - List all available commands."
        ].join('\n');
        message.channel.send(commandsList);
    }

    if (command === '/genkey') {
        if (message.member.roles.cache.some(role => ['Founder', 'Co-Founder', 'Developer', 'Admin'].includes(role.name))) {
            const key = generateKey();
            addKey(key, 30);
            message.channel.send(`Generated key: ${key}`);
        } else {
            message.channel.send('You do not have permission to use this command.');
        }
    }

    if (command === '/redeemkey') {
        const key = args[1];
        if (key) {
            if (redeemKey(message.author.id, key)) {
                message.channel.send('Key redeemed successfully!');
            } else {
                message.channel.send('Invalid or already redeemed key.');
            }
        } else {
            message.channel.send('Please provide a key to redeem.');
        }
    }

    if (command === '/redeemedkeys') {
        if (message.member.roles.cache.some(role => ['Founder', 'Co-Founder', 'Developer', 'Admin'].includes(role.name))) {
            const keysList = listRedeemedKeys();
            message.channel.send(`Redeemed Keys:\n${keysList}`);
        } else {
            message.channel.send('You do not have permission to use this command.');
        }
    }

    if (command === '/removeaccess') {
        if (message.member.roles.cache.some(role => ['Founder', 'Co-Founder', 'Developer', 'Admin'].includes(role.name))) {
            const mentionedUser = message.mentions.users.first();
            if (mentionedUser) {
                removeAccess(mentionedUser.id);
                message.channel.send(`Access removed for: ${mentionedUser.username}`);
            } else {
                message.channel.send('Please mention a user to remove access.');
            }
        } else {
            message.channel.send('You do not have permission to use this command.');
        }
    }
});

client.login(TOKEN);
